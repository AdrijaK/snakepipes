import glob
import os


# ## useful for debugging: show internal variables
# for w in dir(workflow):
#    print(w)
#    print(getattr(workflow, w))
#    print("#"*80)


## Include scripts #############################################################
maindir = workflow.overwrite_config["maindir"]      # main workflow directory

include: os.path.join(maindir, "shared", "paths.py")        # shared files
include: os.path.join(os.path.dirname(workflow.snakefile), "internals.snakefile")   # paths to executables
include: os.path.join(maindir, "shared", "load_organisms.snakefile")    # loading organism indices, GTF, etc.

print("Outdir:", workflow.overwrite_workdir)


# rules #######################################################################
rule all:
    input:
        "rMATS/summary.txt"


rule rMATS_paired_bam:
    input:
        bam_treatment = expand("TopHat2/{sample}.bam", sample=samples_treatment),
        bam_control = expand("TopHat2/{sample}.bam", sample=samples_control),
        gtf = gtf
    output: "rMATS/summary.txt"
    log:    "rMATS/log/rMATS.log"
    benchmark:  "rMATS/.benchmark/rMATS.benchmark"
    params :
        outdir = "rMATS",
        bowtieIndexBase = Bowtie2Index
    threads: 4
    run:
        bam_treatment = ",".join(input.bam_treatment)
        bam_control = ",".join(input.bam_control)
        shell(  "module load rMATS && python2 " + rMATS_path + " "
                "-b1 {bam_treatment} -b2 {bam_control} "
                "-gtf {input.gtf} "
                "-bi {params.bowtieIndexBase} "
                "-o {params.outdir} "
                "-len 50 -t paired -analysis U -c 0.0001 -libType fr-firststrand "
                "2>&1 | tee {log} " )
