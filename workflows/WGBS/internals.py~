import os
import re

def calc_cutThd (zipL,fqin,fqout):
    fqcdir=fqin
    fqcout=fqout
    rNcutL=[]
    with logging_mutex:
        for zipi in [ item for item in zipL ]: 
            zf=os.path.basename(zipi)
            if not os.path.exists(os.path.join(fqcout,re.sub('\.zip','',zf))):
                with zipfile.ZipFile(zipi, "r") as z:
                        z.extractall(path=fqcout)
            fqtxt=os.path.join(fqcout,re.sub('\.zip','',zf),'fastqc_data.txt')
            print('Currently processing :'+ fqtxt)
            os.chdir(os.path.join(fqcout,re.sub('\.zip','',zf)))
            subprocess.check_output(['csplit', '-z' , fqtxt , '/>>/','{*}'])
            with open(fqtxt,'r') as file:
                line=file.readline().strip()
            if '0.11.2' in line or '0.11.6' in line:
                NTconTab=pandas.read_table(os.path.join(os.getcwd(), 'xx09'), sep='\t',skiprows=1,header=0,names=['Index','G','A','T','C'],dtype={'Index':'object','G':'float64','A':'float64','T':'float64','C':'float64'},engine='c')
            else:
                NTconTab=pandas.read_table(os.path.join(os.getcwd(), 'xx09'), sep='\t',skiprows=1,header=0,names=['Index','G','A','T','C'],dtype={'Index':'object','G':'float64','A':'float64','T':'float64','C':'float64'},engine='c')
                print('Check fastqc version')
            difftab=NTconTab.set_index('Index').diff(periods=-1)
            difftabA=difftab.abs()
            maxv=difftabA.idxmax(axis=0)
            maxv=maxv.values.astype(int)
            rNmax=list(difftabA.index)
            rNcut=rNmax[(maxv.max()-1)]
            rNcutL.append(str(rNcut)) ##
            print(NTconTab.head(n=10))
            print(difftab.head(n=10))
            print('Maximal absolute difference per nucleotide :')
            print(difftabA.max(axis=0))
            print('Index of diffmax :')
            print(difftabA.idxmax(axis=0))
            print('Index of the maximal difference :')
            print(maxv.max())
            print('Number of nucleotides for 5prime trimming :' + rNcut)
            os.getcwd()
    zipLre=[ re.sub('_fastqc.zip','.fastq.gz',x ) for x in zipL ]    
    cutThdRes=OrderedDict(zip(zipLre, rNcutL))
    ctr1=filter(lambda x:'_R1.fastq.gz' in x, cutThdRes.keys())
    ctr2=filter(lambda x:'_R2.fastq.gz' in x, cutThdRes.keys())
    cutThdRes_R1=[ cutThdRes[x] for x in ctr1 ]
    cutThdRes_R2=[ cutThdRes[x] for x in ctr2 ]
    cutThdL=zip(cutThdRes_R1,cutThdRes_R2)
    return cutThdL
    

def cut_reads_auto(INfile1,INfile2,OUTfile1,OUTfile2,cutThdOut,cutpath,nthreads):
    read_root=re.sub('_R1.fastq.gz','',os.path.basename(INfile1))
    #prepare threshold values
    ctfile = open(cutThdOut)
    for line in ctfile:
        fields = line.strip().split()
        ct1=fields[0]
        ct2=fields[1]
    bshcmd=cutpath +' cutadapt -a AGATCGGAAGAGC -A AGATCGGAAGAGC --minimum-length 30  -n 5 -j' + str(args.nthreads) +' -u ' + ct1 + ' -U ' + ct2 + ' -o ' + OUTfile1 + ' -p ' + OUTfile2 + ' ' + INfile1 + ' ' + INfile2 + ';sleep 300'
