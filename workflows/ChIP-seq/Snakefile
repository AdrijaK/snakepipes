import os


### snakemake_workflows initialization ########################################
maindir = os.path.dirname(os.path.dirname(workflow.basedir))
sys.path.append(os.path.join(maindir, "shared"))

import common_functions as cf

# load tool paths
globals().update(cf.load_paths(os.path.join(maindir, "shared", "paths.yaml"),maindir,config["verbose"]))
# load config file
globals().update(cf.load_configfile(workflow.overwrite_configfile,config["verbose"]))
# load organism-specific data, i.e. genome indices, annotation, etc.
globals().update(cf.load_organism_data(genome,maindir,config["verbose"]))

# do workflow specific stuff now
include: os.path.join(workflow.basedir, "internals.snakefile")

### include modules of other snakefiles ########################################
################################################################################
# deepTools ChIP
include: os.path.join(maindir, "shared", "rules", "deepTools_ChIP.snakefile")

# MACS2 and MACS2 peak QC
include: os.path.join(maindir, "shared", "rules", "MACS2.snakefile")

# histoneHMM
include: os.path.join(maindir, "shared", "rules", "histoneHMM.snakefile")

# QC report for all samples
include: os.path.join(maindir, "shared", "rules", "ChIP_qc_report.snakefile")

# deeptools cmds
include: os.path.join(maindir, "shared", "deeptools_cmds.snakefile")

# deeptools for allelic bams (if present)
if os.path.isdir(os.path.join(workingdir,'allelic_bams') ) and os.listdir(os.path.join(workingdir,'allelic_bams') ) != []:
    #print('allele-specific files detected')
    allele_info = 'TRUE'
    include: os.path.join(maindir, "shared", "rules", "deepTools_ChIP_allelic.snakefile")
else:
    allele_info = 'FALSE'

# CSAW for differential binding (if sampleinfo specified)
if sample_info:
    include: os.path.join(maindir, "shared", "rules", "CSAW.snakefile")


def run_deepTools_allelic():
    if os.path.isdir('allelic_bams') and os.listdir('allelic_bams') != []:
        file_list = expand("deepTools_ChIP/bamCompare/allele_specific/{chip_sample}.{suffix}.log2ratio.over_input.bw",
                        chip_sample = chip_samples_w_ctrl, suffix = ['genome1', 'genome2'])
        file_list.append( [
        "deepTools_ChIP/plotEnrichment/plotEnrichment.gene_features_allelic.png",
        "deepTools_ChIP/plotEnrichment/plotEnrichment.gene_features_allelic.tsv",
        "deepTools_ChIP/plotFingerprint/plotFingerprint.metrics_allelic.txt" ] )
        return(file_list)
    else:
        return([])

def run_CSAW():
    if sample_info:
        return( ["CSAW/CSAW.session_info.txt"] )
    else:
        return([])

### execute before workflow starts #############################################
################################################################################
onstart:
    if "verbose" in config and config["verbose"]:
        print("--- Workflow parameter ---------------------------------------------------------")
        #print("All samples:", all_samples)
        print("control samples:", control_samples)
        print("ChIP samples w ctrl:", chip_samples_w_ctrl)
        print("ChIP samples wo ctrl:", chip_samples_wo_ctrl)
        print("paired:", paired)
        print("-" * 80, "\n")

        print("--- Environment ----------------------------------------------------------------")
        print("$TMPDIR: ",os.getenv('TMPDIR', ""))
        print("$HOSTNAME: ",os.getenv('HOSTNAME', ""))
        print("-" * 80, "\n")

        print("--- Genome ---------------------------------------------------------------------")
        print("Genome:", genome)
        print("Effective genome size:", genome_size)
        print("Genome FASTA:", genome_fasta)
        print("Genome index:", genome_index)
        print("Genome 2bit:", genome_2bit)
        print("Bowtie2 index:", bowtie2_index)
        print("Gene annotation BED:", genes_bed)
        print("Gene annotation GTF:", genes_gtf)
        print("Blacklist regions BED:", blacklist_bed)
        print("-" * 80, "\n")


### main rule ##################################################################
################################################################################
rule all:
    input:
        "deepTools_ChIP/plotFingerprint/plotFingerprint.metrics.txt",
        expand("deepTools_ChIP/bamCompare/{chip_sample}.filtered.log2ratio.over_input.bw", chip_sample = chip_samples_w_ctrl),
        expand("deepTools_ChIP/bamCompare/{chip_sample}.filtered.subtract.input.bw", chip_sample = chip_samples_w_ctrl),
        expand("MACS2/{chip_sample}.filtered.BAM_peaks.xls", chip_sample = chip_samples),
        expand("MACS2/{chip_sample}.filtered.BAM_peaks.qc.txt", chip_sample = chip_samples),

        ## run histoneHMM broad enrichment calling only for samples annotated as *broad*
        expand("histoneHMM/{chip_sample}.filtered.histoneHMM-regions.gff.gz", chip_sample = [s for s in chip_samples if is_broad(s)]),

        ## run deeptools-allelic only if dir "allelic_bams" present and non empty
        run_deepTools_allelic(),
        ## run csaw if asked for
        run_CSAW(),
        expand("QC_report/{sample}.qc_report.tsv", sample = all_samples),
        "QC_report/qc_report.all_samples.tsv"


### execute after workflow finished ############################################
################################################################################
onsuccess:
    if "verbose" in config and config["verbose"]:
        print("\n--- ChIP-seq workflow finished successfully! -----------------------------------\n")


## benchmark ###################################################################
## rule benchmark:
##     output: "benchmark/benchmark.tsv"
##for f in $(find . -name "*.benchmark" -type f); do seconds=$(cat $f | awk 'NR==2' | cut -f1); bname=$(basename $f | sed 's/.benchmark//'); echo -e "$bname\t$seconds" ; done
