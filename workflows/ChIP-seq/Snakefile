# import glob
import os


### output configuration for debugging #########################################
################################################################################
print("config: {}\n".format(config))


### include scripts ############################################################
################################################################################
# main directory of all snakemake workflows
try:
    maindir = config["maindir"]
except:
    print("ERROR: Variable 'maindir' has not been set by Snakemake "
          "parameter --config or in the configuration.yaml file.")
    exit(1)

# include tool paths
include: os.path.join(maindir, "shared", "paths.py")
# include global variables and functions
include: os.path.join(workflow.basedir, "internals.snakefile")
include: os.path.join(maindir, "shared", "common_functions.py")
# load organism-specific data, i.e. genome indices, annotation, etc.
include: os.path.join(maindir, "shared", "load_organism_data.py")


### include modules of other snakefiles ########################################
################################################################################
# deepTools ChIP
include: os.path.join(maindir, "shared", "rules", "deepTools_ChIP.snakefile")

# MACS2 and MACS2 peak QC
include: os.path.join(maindir, "shared", "rules", "MACS2.snakefile")

# histoneHMM
include: os.path.join(maindir, "shared", "rules", "histoneHMM.snakefile")

# QC report for all samples
include: os.path.join(maindir, "shared", "rules", "ChIP_qc_report.snakefile")


### execute before workflow starts #############################################
################################################################################
onstart:
    if "verbose" in config and config["verbose"]:
        print("--- Workflow parameter ---------------------------------------------------------")
        print("Working directory:", workingdir)
        print("All samples:", all_samples)
        print("Paired-end reads:", paired)
        print("Genome:", genome)
        print("BigWig bin size:", bw_binsize)
        print("-" * 80, "\n")

        print("--- Genome ---------------------------------------------------------------------")
        print("Genome:", genome)
        print("Effective genome size:", genome_size)
        print("Genome FASTA:", genome_fasta)
        print("Genome index:", genome_index)
        print("Genome 2bit:", genome_2bit)
        print("Bowtie2 index:", bowtie2_index)
        print("Gene annotation BED:", genes_bed)
        print("Gene annotation GTF:", genes_gtf)
        print("Blacklist regions BED:", blacklist_bed)
        print("-" * 80, "\n")


### main rule ##################################################################
################################################################################
rule all:
    input:
        "deepTools_ChIP/plotFingerprint/fingerprint.png",
        "deepTools_ChIP/plotEnrichment/signal_erichment.gene_features.png",
        expand("deepTools_ChIP/bamCompare/{chip_sample}.filtered.log2ratio.over_input.bw", chip_sample = chip_samples_w_ctrl),
        expand("deepTools_ChIP/bamCompare/{chip_sample}.filtered.subtract.input.bw", chip_sample = chip_samples_w_ctrl),
        expand("MACS2/{chip_sample}.filtered.BAM_peaks.xls", chip_sample = chip_samples),
        expand("MACS2/{chip_sample}.filtered.BAM_peaks.qc.txt", chip_sample = chip_samples),
        # run histoneHMM broad enrichment calling only for samples annotated as 'broad'
        expand("histoneHMM/{chip_sample}.filtered.histoneHMM-regions.gff.gz",
                chip_sample = [s for s in chip_samples if is_broad(s)] ),
        "QC_report/qc_report.all_samples.tsv"
#       "heatmap/heatmap.genes.png",
#       "heatmap/profile.genes.png",


### execute after workflow finished ############################################
################################################################################
onsuccess:
    if "verbose" in config and config["verbose"]:
        print("\n--- ChIP-seq workflow finished successfully! -----------------------------------\n")


# ## heatmap ####################################################################
# rule computeMatrix_genes:
#     input:
#         bw = [expand("log2ratio/{sample}.log2ratio.bw", sample=[g[0] for g in groups])],
#         bed = genes_bed
#     output: "heatmap/matrix.genes.gz"
#     params:
#         binsize = binsize
#     log:    "heatmap/logs/computeMatrix_genes.log"
#     benchmark:  "heatmap/.benchmark/deepTools_computeMatrix.genes.benchmark"
#     threads: 30
#     shell:  os.path.join(deepTools2_dir,"computeMatrix") + " scale-regions -q -p {threads} "
#             "--skipZeros --binSize={params.binsize} "
#             "--upstream=1000 --downstream=1000 --regionBodyLength=2000 "
#             "-S {input.bw} -R {input.bed} "
#             ##"-S {input.bw} -R <(cat {input.bed} | grep -v PATCH) "
#             "-out {output} "
#             "2>&1 | tee {log} "
#
#
# rule plotHeatmap_genes:
#     input:  "heatmap/matrix.genes.gz"
#     output: "heatmap/heatmap.genes.png"
#     params:
#         label = [g[0] for g in groups]
#     log:    "heatmap/logs/plotHeatmap_genes.log"
#     benchmark:  "heatmap/.benchmark/deepTools_plotHeatmap.genes.benchmark"
#     shell:  os.path.join(deepTools2_dir,"plotHeatmap") + " --heatmapWidth=5 "
#             "--samplesLabel {params.label} "
#             "-m {input} "
#             "-out {output} "
#             "2>&1 | tee {log} "
#
#
# rule plotProfile_genes:
#     input:  "heatmap/matrix.genes.gz"
#     output: "heatmap/profile.genes.png"
#     params:
#         label = [g[0] for g in groups]
#     log:    "heatmap/logs/plotProfile_genes.log"
#     benchmark:  "heatmap/.benchmark/deepTools_plotProfile.genes.benchmark"
#     shell:  os.path.join(deepTools2_dir,"plotProfile") + " "
#             "--plotType=fill --perGroup --samplesLabel {params.label} "
#             "-m {input} "
#             "-out {output} "
#             "2>&1 | tee {log} "
#
#
# ## benchmark ###################################################################
# ## rule benchmark:
# ##     output: "benchmark/benchmark.tsv"
#
#
# ## benchmark ###################################################################
# ##for f in $(find . -name "*.benchmark" -type f); do seconds=$(cat $f | awk 'NR==2' | cut -f1); bname=$(basename $f | sed 's/.benchmark//'); echo -e "$bname\t$seconds" ; done
