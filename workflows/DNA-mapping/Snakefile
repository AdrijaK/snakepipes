# import glob
import os


# ## useful for debugging: show internal variables
# for w in dir(workflow):
#    print(w)
#    print(getattr(workflow, w))
#    print("#"*80)


### include scripts ############################################################
################################################################################
# main directory of all snakemake workflows
maindir = config["maindir"]

# include tool paths
include: os.path.join(maindir, "shared", "paths.py")
# include global variables and functions
include: os.path.join(workflow.basedir, "internals.snakefile")
# load organism-specific data, i.e. genome indices, annotation, etc.
include: os.path.join(maindir, "shared", "load_organism_data.py")


### include modules of other snakefiles ########################################
################################################################################
# FASTQ: either downsample FASTQ files or create symlinks
if downsample:
    include: os.path.join(maindir, "shared", "rules", "FASTQ_downsample.snakefile")
else:
    include: os.path.join(maindir, "shared", "rules", "FASTQ_symlink.snakefile")

# FastQC
if fastqc:
    include: os.path.join(maindir, "shared", "rules", "FastQC.snakefile")

# TrimGalore
if trim:
    include: os.path.join(maindir, "shared", "rules", "TrimGalore.snakefile")

# Bowtie2 and Picard MarkDuplicates
include: os.path.join(maindir, "shared", "rules", "Bowtie2_and_MarkDuplicates.snakefile")

# Picard CollectAlignmentSummaryMetrics and CollectInsertSizeMetrics
include: os.path.join(maindir, "shared", "rules", "Picard_qc.snakefile")

# deepTools
include: os.path.join(maindir, "shared", "rules", "deepTools.snakefile")

# Qualimap BAM QC
include: os.path.join(maindir, "shared", "rules", "Qualimap_bamqc.snakefile")


### conditional/optional rules #################################################
################################################################################
def run_FastQC(fastqc):
    if fastqc:
        return( expand("FastQC/{sample}{read}_fastqc.html", sample=samples, read=reads) )
    else:
        return([])

def run_TrimGalore(trim):
    if trim and fastqc:
        return( expand("FastQC_on_TrimGalore/{sample}{read}_fastqc.html", sample=samples, read=reads) )
    elif trim:
        return( expand("FASTQ_TrimGalore/{sample}{read}.fastq.gz", sample=samples, read=reads) )
    else:
        return([])

def run_CollectInsertSizeMetrics(paired):
    if paired:
        return( expand("Picard_qc/InsertSizeMetrics/{sample}.insert_size_metrics.txt", sample=samples) )
    else:
        return([])


### main rule ##################################################################
################################################################################
rule all:
    input:
    # TODO: add optional BAM filtering by quality, duplicates and secondary alignments after mapping and duplicate marking
        expand("FASTQ/{sample}{read}.fastq.gz", sample=samples, read=reads),
        run_FastQC(fastqc),
        run_TrimGalore(trim),
        expand("Bowtie2/{sample}.bam.bai", sample=samples),
        expand("Picard_qc/AlignmentSummaryMetrics/{sample}.alignment_summary_metrics.txt", sample=samples),
        run_CollectInsertSizeMetrics(paired),
        expand("bamCoverage/{sample}.SeqDepthNorm.bw", sample=samples),
        expand("deepTools_qc/computeGCBias/{sample}.GCBias.png", sample=samples),
        "deepTools_qc/plotCoverage/read_coverage.png",
        "deepTools_qc/plotCorrelation/correlation.pearson.read_coverage.heatmap.png",
        "deepTools_qc/plotCorrelation/correlation.spearman.read_coverage.heatmap.png",
        "deepTools_qc/plotPCA/PCA.read_coverage.png",
        expand("Qualimap_qc/{sample}.bamqc_report.html", sample=samples),
        expand("Qualimap_qc/{sample}.bamqc_results.txt", sample=samples)
    run:
        print("\n--- Workflow parameter ---------------------------------------------------------")
        print("Indir:", indir)
        print("Infiles:", infiles)
        print("Samples:", samples)
        print("Paired:", paired)
        print("Reads:", reads)
        print("Genome:", genome)
        print("Downsample:", downsample)
        print("Trim:", trim)
        print("FastQC:", fastqc)
        print("BigWig bin size:", bw_binsize)
        print("FastQ directory for mapping:", fastq_dir)
        print("-" * 80, "\n")
