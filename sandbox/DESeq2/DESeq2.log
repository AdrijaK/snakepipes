
R version 3.3.1 (2016-06-21) -- "Bug in Your Hair"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## Usage: cat DESeq2.R | /package/R-3.2.0/bin/R --vanilla --quiet --args setup.tsv counts.txt 0.05 species.gene_names
> 
> .Library
[1] "/package/R-3.3.1/lib64/R/library"
> .Library.site
character(0)
> .libPaths()
[1] "/data/manke/repository/scripts/snakemake_workflows/R/x86_64-redhat-linux-gnu-library/3.3"
[2] "/package/R-3.3.1/lib64/R/library"                                                        
> 
> require("DESeq2")
Loading required package: DESeq2
Loading required package: S4Vectors
Loading required package: stats4
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: 'BiocGenerics'

The following objects are masked from 'package:parallel':

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from 'package:stats':

    IQR, mad, xtabs

The following objects are masked from 'package:base':

    Filter, Find, Map, Position, Reduce, anyDuplicated, append,
    as.data.frame, cbind, colnames, do.call, duplicated, eval, evalq,
    get, grep, grepl, intersect, is.unsorted, lapply, lengths, mapply,
    match, mget, order, paste, pmax, pmax.int, pmin, pmin.int, rank,
    rbind, rownames, sapply, setdiff, sort, table, tapply, union,
    unique, unsplit, which, which.max, which.min


Attaching package: 'S4Vectors'

The following objects are masked from 'package:base':

    colMeans, colSums, expand.grid, rowMeans, rowSums

Loading required package: IRanges
Loading required package: GenomicRanges
Loading required package: GenomeInfoDb
Loading required package: SummarizedExperiment
Loading required package: Biobase
Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

> require("gplots")
Loading required package: gplots

Attaching package: 'gplots'

The following object is masked from 'package:IRanges':

    space

The following object is masked from 'package:S4Vectors':

    space

The following object is masked from 'package:stats':

    lowess

> require("ggplot2")
Loading required package: ggplot2
> require("RColorBrewer")
Loading required package: RColorBrewer
> 
> sessionInfo()
R version 3.3.1 (2016-06-21)
Platform: x86_64-redhat-linux-gnu (64-bit)
Running under: CentOS Linux 7 (Core)

locale:
[1] C

attached base packages:
[1] parallel  stats4    stats     graphics  grDevices utils     datasets 
[8] methods   base     

other attached packages:
 [1] RColorBrewer_1.1-2         ggplot2_2.2.1             
 [3] gplots_3.0.1               DESeq2_1.14.1             
 [5] SummarizedExperiment_1.4.0 Biobase_2.34.0            
 [7] GenomicRanges_1.26.2       GenomeInfoDb_1.10.2       
 [9] IRanges_2.8.1              S4Vectors_0.12.1          
[11] BiocGenerics_0.20.0       

loaded via a namespace (and not attached):
 [1] genefilter_1.56.0    gtools_3.5.0         locfit_1.5-9.1      
 [4] splines_3.3.1        lattice_0.20-33      colorspace_1.3-2    
 [7] htmltools_0.3.5      base64enc_0.1-3      survival_2.40-1     
[10] XML_3.98-1.5         foreign_0.8-66       DBI_0.5-1           
[13] BiocParallel_1.8.1   plyr_1.8.4           stringr_1.1.0       
[16] zlibbioc_1.20.0      munsell_0.4.3        gtable_0.2.0        
[19] caTools_1.17.1       memoise_1.0.0        latticeExtra_0.6-28 
[22] knitr_1.15.1         geneplotter_1.52.0   AnnotationDbi_1.36.0
[25] htmlTable_1.8        Rcpp_0.12.8.4        KernSmooth_2.23-15  
[28] acepack_1.4.1        xtable_1.8-2         backports_1.0.4     
[31] scales_0.4.1         checkmate_1.8.2      gdata_2.17.0        
[34] Hmisc_4.0-2          annotate_1.52.1      XVector_0.14.0      
[37] gridExtra_2.2.1      digest_0.6.11        stringi_1.1.2       
[40] grid_3.3.1           tools_3.3.1          bitops_1.0-6        
[43] magrittr_1.5         lazyeval_0.2.0       RCurl_1.95-4.8      
[46] tibble_1.2           RSQLite_1.1-2        Formula_1.2-1       
[49] cluster_2.0.4        Matrix_1.2-6         data.table_1.10.0   
[52] assertthat_0.1       rpart_4.1-10         nnet_7.3-12         
> 
> args = commandArgs(TRUE)
> print(args)
[1] "/data/manke/group/rauer/pospisilikgroup/170314_J00182_0022_AHJ23NBBXX_lanes1_2_3_4_5_6_7/sample_kdvswt.tsv"
[2] "../featureCounts/counts.tsv"                                                                               
[3] "0.05"                                                                                                      
[4] "/home/rauer/projects/snakemake_workflows/shared/organisms/mm10.symbol"                                     
>  
> ## For debugging only!!! #######################################################
> ## setwd("output_dir")
> ## args = c('setup_table.tsv',
> ##          'counts.txt',
> ##          '0.05',
> ##          'species.gene_names')
> ################################################################################
> 
> plotVolcano <- function(res_obj, data=plot) {
+   # Volcano plot
+   xlim = c(-4,4)
+   ylim = c(0,20)
+   cex=c(0.3,0.5)
+   plotdata = data.frame(log2FoldChange=res_obj$log2FoldChange, padj=res_obj$padj )
+   plotdata = plotdata[!is.na(plotdata),]
+   plotdata$cex = cex[[1]]
+   plotdata$pch = 16
+   plotdata$col = "#525252"
+   plotdata$col[plotdata$padj<=fdr] = "#cd0000"
+   
+   plotdata$pch[plotdata$log2FoldChange<xlim[[1]]] = 5
+   plotdata$cex[plotdata$log2FoldChange<xlim[[1]]] = cex[[2]]
+   plotdata$log2FoldChange[plotdata$log2FoldChange<xlim[[1]]] = xlim[[1]]
+ 
+   plotdata$pch[plotdata$log2FoldChange>xlim[[2]]] = 5
+   plotdata$cex[plotdata$log2FoldChange>xlim[[2]]] = cex[[2]]
+   plotdata$log2FoldChange[plotdata$log2FoldChange>xlim[[2]]] = xlim[[2]]
+   
+   plotdata$pch[-log10(plotdata$padj) > ylim[[2]]] = 2
+   plotdata$cex[-log10(plotdata$padj) > ylim[[2]]] = cex[[2]]
+   plotdata$padj[-log10(plotdata$padj) > ylim[[2]]] = 10^-ylim[[2]]
+   
+   #head(plotdata)
+   #dim(plotdata)
+   plot(plotdata$log2FoldChange, -log10(plotdata$padj),
+        main=sprintf("Volcano plot\n(FDR: %.2f, up: %d, down: %d)",fdr,length(de_up[,1]),length(de_down[,1])),
+        xlab="log2-fold change",
+        ylab="-log10 q-value",
+        xlim=xlim,
+        ylim=ylim,
+        cex=plotdata$cex, pch=plotdata$pch,
+        col=plotdata$col)
+   abline(h=-log10(fdr), col=rgb(0,0,1,0.5), lwd=4)
+   abline(v=0, col=rgb(1,0,0,0.5), lwd=4)
+ }
> 
> ################################################################################
> 
> 
> print("Running DESeq2 from rna-seq-qc...")
[1] "Running DESeq2 from rna-seq-qc..."
> 
> ## FDR significance threshold
> fdr = as.numeric(args[3])
> if ( is.na(fdr) ) fdr = 0.05  # default FDR
> 
> topN =as.numeric(args[5])
> if ( is.na(topN) ) topN = 50  # use topN genes for plots
> 
> #from command line
> sampleInfoFilePath = args[1]
> countFilePath = args[2]
> geneNamesFilePath = args[4]   # BioMart file with ensembl and symbol names
> 
> cat(paste("Working dir:", getwd(), "\n"))
Working dir: /home/rauer/projects/snakemake_workflows/sandbox/DESeq2 
> cat(paste("Sample info CSV:", sampleInfoFilePath, "\n"))
Sample info CSV: /data/manke/group/rauer/pospisilikgroup/170314_J00182_0022_AHJ23NBBXX_lanes1_2_3_4_5_6_7/sample_kdvswt.tsv 
> cat(paste("Count file:", countFilePath, "\n"))
Count file: ../featureCounts/counts.tsv 
> cat(paste("FDR:", fdr, "\n"))
FDR: 0.05 
> cat(paste("Gene names:", geneNamesFilePath, "\n"))
Gene names: /home/rauer/projects/snakemake_workflows/shared/organisms/mm10.symbol 
> cat(paste("Number of top N genes:", topN, "\n"))
Number of top N genes: 50 
> 
> ## sampleInfo (setupt of the experiment)
> sampleInfo = read.table(sampleInfoFilePath, header=TRUE, stringsAsFactor=F)
> ## add X at the beginning of rows beginning with a number (makes it consistent to column names of of the count matrix!)
> if ( any(grepl("^[0-9]", sampleInfo$name)) ) {
+   sampleInfo[grepl("^[0-9]", sampleInfo$name),]$name = paste("X", sampleInfo[grepl("^[0-9]", sampleInfo$name),]$name, sep="")  
+ }
> sampleInfo = DataFrame(as.data.frame(unclass(sampleInfo)))
> ##sampleInfo = sampleInfo[order(sampleInfo$name, decreasing=F),]  # order by sample name
> as.character(sampleInfo$name)
 [1] "MomD9_23" "MomD9_24" "MomD9_25" "MomD9_26" "MomD9_32" "MomD9_33"
 [7] "MomD9_34" "MomD9_36" "MomD9_37" "MomD9_38"
> 
> ## count matrix (e.g. from DESeq or featureCounts)
> countdata = read.table(countFilePath, header=TRUE)
> countdata = DataFrame(round(countdata))
> colnames(countdata)
 [1] "MomD9_23" "MomD9_24" "MomD9_25" "MomD9_26" "MomD9_32" "MomD9_33"
 [7] "MomD9_34" "MomD9_36" "MomD9_37" "MomD9_38"
> 
> ## 1st check: if names of the setup table are subset of the count matrix column names
> if ( ! all( is.element(sort(sampleInfo[,1]), sort(colnames(countdata))) ) ) {
+   cat("Error! Count table column names and setup table names do NOT match!\n")
+   print(as.character(sampleInfo[,1]))
+   print(colnames(countdata))
+   quit(save = "no", status = 1, runLast = FALSE)   # Exit 1
+ }
> 
> ## extract only the columns specified in the setup table
> countdata = countdata[,as.character(sampleInfo[,1])]
> head(countdata)
DataFrame with 6 rows and 10 columns
                       MomD9_23  MomD9_24  MomD9_25  MomD9_26  MomD9_32
                      <numeric> <numeric> <numeric> <numeric> <numeric>
ENSMUSG00000000001.4       6012      6727      6797      6967      4701
ENSMUSG00000000003.15         2         0         0         0         1
ENSMUSG00000000028.14       457       431       311       306       371
ENSMUSG00000000031.15        36       143        56        29        62
ENSMUSG00000000037.16        59        57        57        60        74
ENSMUSG00000000049.11        20         6        20        12        20
                       MomD9_33  MomD9_34  MomD9_36  MomD9_37  MomD9_38
                      <numeric> <numeric> <numeric> <numeric> <numeric>
ENSMUSG00000000001.4       3856      7628      6815      6930      5183
ENSMUSG00000000003.15         0         0         1         0         0
ENSMUSG00000000028.14       238       474       337       390       324
ENSMUSG00000000031.15        42        67        30        36        19
ENSMUSG00000000037.16        34        77        64        54        45
ENSMUSG00000000049.11         7        18        12        15         8
> colnames(countdata)
 [1] "MomD9_23" "MomD9_24" "MomD9_25" "MomD9_26" "MomD9_32" "MomD9_33"
 [7] "MomD9_34" "MomD9_36" "MomD9_37" "MomD9_38"
> 
> ## 2nd: check if the ORDER of sample names matches as well
> if ( ! all(as.character(sampleInfo$name) == colnames(countdata)) ) {
+   cat("Error! Count table column names and setup table names do NOT match!\n")
+   print(as.character(sampleInfo$name))
+   print(colnames(countdata))
+   quit(save = "no", status = 1, runLast = FALSE)   # Exit 1
+ }
> 
> 
> dds = DESeqDataSetFromMatrix(
+   countData = countdata,
+   colData = sampleInfo,
+   design = ~ condition)
converting counts to integer mode
> dds
class: DESeqDataSet 
dim: 47937 10 
metadata(1): version
assays(1): counts
rownames(47937): ENSMUSG00000000001.4 ENSMUSG00000000003.15 ...
  ENSMUSG00000109577.1 ENSMUSG00000109578.1
rowData names(0):
colnames(10): MomD9_23 MomD9_24 ... MomD9_37 MomD9_38
colData names(3): name condition batch
> 
> ## reorder conditions by sampleInfo
> if ( dds$condition[[1]] != levels(dds$condition)[[1]] ) {
+   dds$condition = relevel(dds$condition, as.character(dds$condition[[1]]) ) 
+ }
> 
> colnames(dds) = sampleInfo$name
> head(assay(dds))
                      MomD9_23 MomD9_24 MomD9_25 MomD9_26 MomD9_32 MomD9_33
ENSMUSG00000000001.4      6012     6727     6797     6967     4701     3856
ENSMUSG00000000003.15        2        0        0        0        1        0
ENSMUSG00000000028.14      457      431      311      306      371      238
ENSMUSG00000000031.15       36      143       56       29       62       42
ENSMUSG00000000037.16       59       57       57       60       74       34
ENSMUSG00000000049.11       20        6       20       12       20        7
                      MomD9_34 MomD9_36 MomD9_37 MomD9_38
ENSMUSG00000000001.4      7628     6815     6930     5183
ENSMUSG00000000003.15        0        1        0        0
ENSMUSG00000000028.14      474      337      390      324
ENSMUSG00000000031.15       67       30       36       19
ENSMUSG00000000037.16       77       64       54       45
ENSMUSG00000000049.11       18       12       15        8
> 
> ################################################################################
> ## Extra data collecting some measures for every sample (e.g. total
> ## counts, scaling factors,...)
> info <- data.frame(row.names=sampleInfo$name)
> ################################################################################
> ## counts per sample
> apply(assay(dds), 2, sum) 
MomD9_23 MomD9_24 MomD9_25 MomD9_26 MomD9_32 MomD9_33 MomD9_34 MomD9_36 
48940723 44088465 41605476 46309240 39804120 34358836 50501121 49280796 
MomD9_37 MomD9_38 
53108985 39820554 
> info$total_counts = apply(assay(dds), 2, sum)   # add to info
> info
         total_counts
MomD9_23     48940723
MomD9_24     44088465
MomD9_25     41605476
MomD9_26     46309240
MomD9_32     39804120
MomD9_33     34358836
MomD9_34     50501121
MomD9_36     49280796
MomD9_37     53108985
MomD9_38     39820554
> 
> ## count table
> head(assay(dds))
                      MomD9_23 MomD9_24 MomD9_25 MomD9_26 MomD9_32 MomD9_33
ENSMUSG00000000001.4      6012     6727     6797     6967     4701     3856
ENSMUSG00000000003.15        2        0        0        0        1        0
ENSMUSG00000000028.14      457      431      311      306      371      238
ENSMUSG00000000031.15       36      143       56       29       62       42
ENSMUSG00000000037.16       59       57       57       60       74       34
ENSMUSG00000000049.11       20        6       20       12       20        7
                      MomD9_34 MomD9_36 MomD9_37 MomD9_38
ENSMUSG00000000001.4      7628     6815     6930     5183
ENSMUSG00000000003.15        0        1        0        0
ENSMUSG00000000028.14      474      337      390      324
ENSMUSG00000000031.15       67       30       36       19
ENSMUSG00000000037.16       77       64       54       45
ENSMUSG00000000049.11       18       12       15        8
> write.table(assay(dds),"counts.tsv", sep="\t", quote=FALSE, col.names=NA) # save to file
> 
> ## DE analysis
> assign("last.warning", NULL, envir = baseenv())
> dds = DESeq(dds)
estimating size factors
estimating dispersions
gene-wise dispersion estimates
mean-dispersion relationship
final dispersion estimates
fitting model and testing
> warnings()
NULL
> sink("DESeq2.WARNINGS.txt"); warnings(); sink() # save warnings to file
> 
> ## show size factors used for read count normalisation
> sizeFactors(dds)
 MomD9_23  MomD9_24  MomD9_25  MomD9_26  MomD9_32  MomD9_33  MomD9_34  MomD9_36 
1.0359190 1.0190424 0.9568964 1.0789699 0.8713657 0.8142046 1.1524451 1.1223478 
 MomD9_37  MomD9_38 
1.1695951 0.8969815 
> info$size_factors = sizeFactors(dds) 
> info
         total_counts size_factors
MomD9_23     48940723    1.0359190
MomD9_24     44088465    1.0190424
MomD9_25     41605476    0.9568964
MomD9_26     46309240    1.0789699
MomD9_32     39804120    0.8713657
MomD9_33     34358836    0.8142046
MomD9_34     50501121    1.1524451
MomD9_36     49280796    1.1223478
MomD9_37     53108985    1.1695951
MomD9_38     39820554    0.8969815
> 
> # save normalized counts to file
> write.table(counts(dds, normalized=T),"DESeq2.counts_normalized.tsv", sep="\t", quote=FALSE, col.names=NA)
> 
> 
> ## Expression density plot
> toplot = data.frame(counts(dds, normalized=T))
> toplot = stack(toplot, select=colnames(toplot))
> p = ggplot( toplot, aes(values, colour=ind, alpha=0.5))
> p + geom_line(aes(color=ind), stat="density", alpha=0.5) +
+   scale_x_log10(name="\nnormalized counts", breaks=c(0.1,1,10,100,1000,10000,100000), limits=c(0.1,100000) ) +
+   scale_y_continuous(name="density\n") +
+   scale_colour_discrete(name="Samples") +
+   geom_vline(xintercept=10, colour="grey", linetype = "dashed") +
+   theme_minimal() +
+   ggtitle("Density plot\n") +
+   theme()
Warning messages:
1: Transformation introduced infinite values in continuous x-axis 
2: Removed 240146 rows containing non-finite values (stat_density). 
> ggsave(file=sprintf("Fig8.Density_plot.sample_read_counts.pdf"), width=7, height=6)
Warning messages:
1: Transformation introduced infinite values in continuous x-axis 
2: Removed 240146 rows containing non-finite values (stat_density). 
> 
> 
> # ## size factors plot
> # plotdata = data.frame(name=colnames(dds), size_factor=sizeFactors(dds))
> # plotdata
> # ggplot(plotdata, aes(x=name)) +
> #   geom_bar(aes(weight=size_factor), fill="darkseagreen", width=.7) +
> #   theme_bw(base_size=14) +
> #   geom_text(aes(y=size_factor, label=sprintf("%.3f",size_factor)), size = 4, hjust = 0.5, vjust = -1) +
> #   theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
> #   xlab("") +
> #   ylab("Size factor")
> # ggsave(file=sprintf("Fig7.Size_factors.pdf"))
> 
> ## dispersion plot
> pdf("Fig1.dispersion_plot.pdf")
> plotDispEsts(dds, main="Dispersion plot")
> dev.off()
pdf 
  2 
> 
> ## get results
> res = results(dds, alpha=fdr)
> str(res)
Formal class 'DESeqResults' [package "DESeq2"] with 6 slots
  ..@ rownames       : chr [1:47937] "ENSMUSG00000000001.4" "ENSMUSG00000000003.15" "ENSMUSG00000000028.14" "ENSMUSG00000000031.15" ...
  ..@ nrows          : int 47937
  ..@ listData       :List of 6
  .. ..$ baseMean      : num [1:47937] 6049.044 0.397 359.701 52.005 57.492 ...
  .. ..$ log2FoldChange: num [1:47937] 0.0494 0.00237 -0.14711 -0.29693 0.15388 ...
  .. ..$ lfcSE         : num [1:47937] 0.118 0.081 0.148 0.225 0.176 ...
  .. ..$ stat          : num [1:47937] 0.4173 0.0292 -0.9929 -1.3174 0.8725 ...
  .. ..$ pvalue        : num [1:47937] 0.676 0.977 0.321 0.188 0.383 ...
  .. ..$ padj          : num [1:47937] 1 NA 1 1 1 ...
  ..@ elementType    : chr "ANY"
  ..@ elementMetadata:Formal class 'DataFrame' [package "S4Vectors"] with 6 slots
  .. .. ..@ rownames       : NULL
  .. .. ..@ nrows          : int 6
  .. .. ..@ listData       :List of 2
  .. .. .. ..$ type       : chr [1:6] "intermediate" "results" "results" "results" ...
  .. .. .. ..$ description: chr [1:6] "mean of normalized counts for all samples" "log2 fold change (MAP): condition wt vs ko" "standard error: condition wt vs ko" "Wald statistic: condition wt vs ko" ...
  .. .. ..@ elementType    : chr "ANY"
  .. .. ..@ elementMetadata: NULL
  .. .. ..@ metadata       : list()
  ..@ metadata       :List of 5
  .. ..$ filterThreshold: Named num 6.69
  .. .. ..- attr(*, "names")= chr "61.97076%"
  .. ..$ filterTheta    : num 0.62
  .. ..$ filterNumRej   :'data.frame':	50 obs. of  2 variables:
  .. .. ..$ theta : num [1:50] 0.372 0.384 0.396 0.407 0.419 ...
  .. .. ..$ numRej: num [1:50] 47 47 47 47 47 47 47 47 47 47 ...
  .. ..$ lo.fit         :List of 2
  .. .. ..$ x: num [1:50] 0.372 0.384 0.396 0.407 0.419 ...
  .. .. ..$ y: num [1:50] 47 47 47 47 47 ...
  .. ..$ alpha          : num 0.05
> summary(res)

out of 30105 with nonzero total read count
adjusted p-value < 0.05
LFC > 0 (up)     : 14, 0.047% 
LFC < 0 (down)   : 44, 0.15% 
outliers [1]     : 102, 0.34% 
low counts [2]   : 11847, 39% 
(mean count < 7)
[1] see 'cooksCutoff' argument of ?results
[2] see 'independentFiltering' argument of ?results

> dim(res)
[1] 47937     6
> 
> ################################################################################
> ## gene names dict if available
> ################################################################################
> 
> if (file.exists(geneNamesFilePath)) { 
+   cat(paste("Gene names file found\n")) 
+   #geneNames = read.csv(geneNamesFilePath, sep="\t", header=F, row.names=1, stringsAsFactors=FALSE)
+   geneNames = read.csv(geneNamesFilePath, sep="\t", header=F, stringsAsFactors=FALSE)
+   geneNames = geneNames[!duplicated(geneNames[,1]),]
+   rownames(geneNames) = geneNames[,1]
+   geneNames[,1] = NULL
+   head(geneNames)
+   
+   if (length( intersect( gsub("\\..*", "", res@rownames), rownames(geneNames) ) ) > 0) {
+     cat(paste("Names matching to IDs found\n")) 
+     
+     ## make a dictionary
+     gene_names_dic = geneNames[[1]]
+     names(gene_names_dic) = rownames(geneNames)
+     ##gene_names_dic["ENSMUSG00000025332"]
+   }
+ }
Gene names file found
Names matching to IDs found
> 
> ## generate a dataframe from ids
> id_to_gene_name = function(ids) {
+   d = data.frame(IDs=gsub("\\..*", "", ids), gene_names=NA)
+   d$gene_names = gene_names_dic[ as.character(d$IDs) ]
+   head(d)
+   
+   # some might be NAs; replace those by original ID
+   d[which(is.na(d$gene_names)),]$gene_names = as.character(d[which(is.na(d$gene_names)),]$IDs)
+   head(d)
+   return(d$gene_name)
+ }
> 
> gene_names_df <- function(obj) {
+   df = as.data.frame(obj)
+   if (dim(df)[[1]] > 0) {
+     if ( exists("gene_names_dic") ) {
+       df$gene_names = id_to_gene_name(rownames(df))
+     } 
+   }
+   return(df)
+ }
> 
> ################################################################################
> 
> ## DE results (all) ############################################################
> write.table(gene_names_df(res),"DESeq2.results.tsv", sep="\t", quote=FALSE, col.names=NA)
> 
> 
> ## DE ##########################################################################
> de_total = res[which(res$padj < fdr),]
> length(de_total[,1])
[1] 58
> write.table(gene_names_df(de_total[order(de_total$padj, decreasing=F),]),"DESeq2.de_all.tsv", sep="\t", quote=FALSE, col.names=NA)
> 
> de_up = de_total[which(de_total$log2FoldChange>0),]
> de_up = de_up[order(de_up$padj, decreasing=F),]   # order by adjusted p-value
> length(de_up[,1])
[1] 14
> write.table(gene_names_df(de_up),"DESeq2.de_up.tsv", sep="\t", quote=FALSE, col.names=NA)
> 
> de_down = de_total[which(de_total$log2FoldChange<0),]
> de_down = de_down[order(de_down$padj, decreasing=F),]           # order by adjusted p-value
> length(de_down[,1])
[1] 44
> write.table(gene_names_df(de_down),"DESeq2.de_down.tsv", sep="\t", quote=FALSE, col.names=NA)
> 
> # save info to stats file
> write.table(info,"DESeq2.stats.tsv", sep="\t", quote=FALSE, col.names=NA)
> 
> # MA and volcano plot
> pdf("Fig2.MA_plot.pdf", width=6, height=6)
> par(mfrow=c(1,1))
> plotMA(res, alpha=fdr, ylim=c(-4,4),
+        main=sprintf("MA-plot\n(FDR: %.2f, up: %d, down: %d)",fdr,length(de_up[,1]),length(de_down[,1])),
+        ylab="log2 fold change")
> dev.off()
pdf 
  2 
> 
> pdf("Fig3.Vulcano_plot.pdf", width=6, height=6)
> plotVolcano(res)
> dev.off()
pdf 
  2 
> 
> 
> # ## Histogram of p-values
> # pdf("FigX.p-values_histogram.pdf")
> # hist(res$pvalue, breaks=20, col="grey", main="Histogram of p-values", xlab="p-value")
> # dev.off()
> 
> ## Histogram of adjusted p-values
> pdf("Fig4.padj_histogram.pdf")
> hist(res$padj, breaks=20, col="grey", main="Histogram of adjusted p-values", xlab="padj")
> abline(v=fdr, col="red", lwd=1)
> dev.off()
pdf 
  2 
> 
> ## Independent filtering
> 
> ## This value is the mean count threshold used for independent filtering
> ind_filt_mean_count_thres = as.numeric(metadata(res)$filterThreshold)
> print(ind_filt_mean_count_thres)
[1] 6.687636
> 
> ## Expression density plot
> toplot = data.frame(gene_names_df(res)$baseMean)
> colnames(toplot) = c("baseMean")
> head(toplot)
      baseMean
1 6049.0444089
2    0.3969266
3  359.7014468
4   52.0045338
5   57.4923872
6   13.6821446
> p = ggplot(toplot, aes(baseMean))
> p + geom_line(aes(color=baseMean), stat="density", alpha=0.5, colour="blue", size=1.1) +
+   scale_x_log10(name="\nmean counts", breaks=c(0.01,0.1,1,10,100,1000,10000,100000), limits=c(0.01,100000) ) +
+   scale_y_continuous(name="density\n") +
+   scale_colour_discrete(name="Samples") +
+   geom_vline(xintercept=ind_filt_mean_count_thres, colour="red", size=1.1) +
+   theme_minimal() +
+   ggtitle(sprintf("Density plot\n(independent filtering: %.3f)\n", ind_filt_mean_count_thres)) +
+   theme() +
+   theme(legend.position="none")
Warning messages:
1: Transformation introduced infinite values in continuous x-axis 
2: Removed 17866 rows containing non-finite values (stat_density). 
> ggsave(file=sprintf("Fig9.Density_plot.mean_read_counts.pdf"), width=7, height=6)
Warning messages:
1: Transformation introduced infinite values in continuous x-axis 
2: Removed 17866 rows containing non-finite values (stat_density). 
> 
> 
> # attr(res,"filterThreshold")
> # plot(attr(res,"filterNumRej"), type="b",
> #      ylab="number of rejections",
> #      xlab="quantiles of mean of normalized counts")
> 
> # plot(res$baseMean+1, -log10(res$padj),
> #      log="x",
> #      xlab="mean of normalized counts",
> #      ylab="-log10 padj",
> #      cex=.4, col=rgb(0,0,0,.3))
> # abline(h=-log10(fdr), col="red", lwd=1)
> # 
> # plot(metadata(res)$filterNumRej,
> #      type="b", ylab="number of rejections",
> #      xlab="quantiles of filter")
> # lines(metadata(res)$lo.fit, col="red")
> # abline(v=metadata(res)$filterTheta)
> 
> ################################################################################
> ## rlog transform; for clustering and ordination (e.g PCA)
> rld = rlog(dds)
> head(assay(rld))
                       MomD9_23  MomD9_24  MomD9_25  MomD9_26  MomD9_32
ENSMUSG00000000001.4  12.521912 12.640339 12.708610 12.619888 12.455729
ENSMUSG00000000003.15 -1.233436 -1.311412 -1.310180 -1.312531 -1.269199
ENSMUSG00000000028.14  8.666060  8.628039  8.396895  8.281306  8.633634
ENSMUSG00000000031.15  5.359898  6.409981  5.699926  5.215976  5.841854
ENSMUSG00000000037.16  5.830127  5.817759  5.861016  5.813703  6.119982
ENSMUSG00000000049.11  3.890465  3.504678  3.925494  3.670413  3.967395
                       MomD9_33  MomD9_34  MomD9_36  MomD9_37  MomD9_38
ENSMUSG00000000001.4  12.339387 12.642828 12.563273 12.540837 12.517941
ENSMUSG00000000003.15 -1.307019 -1.313820 -1.274154 -1.314109 -1.308915
ENSMUSG00000000028.14  8.307633  8.603242  8.329169  8.418713  8.488216
ENSMUSG00000000031.15  5.610574  5.697481  5.211505  5.287013  5.110950
ENSMUSG00000000037.16  5.633666  5.943796  5.830975  5.689700  5.745935
ENSMUSG00000000049.11  3.600721  3.798593  3.656833  3.720307  3.607387
> 
> # save rlog tranformed counts to file
> write.table(gene_names_df(assay(rld)),"DESeq2.counts_rlog.tsv", sep="\t", quote=FALSE, col.names=NA)
> 
> # show that DEseq's rlog works; not really needed for data analysis
> ##par(mfrow=c(1,2))
> ##plot(log2(1+counts(dds, normalized=T)[,1:2]), col="#00000020", pch=20, cex=0.3)     #log2
> ##plot(assay(rld)[,1:2], col="#00000020", pch=20, cex=0.3)                            #rlog (DESeq); is superior
> 
> ## Sample distances
> sampleDists = dist(t(assay(rld)))
> sampleDists
         MomD9_23 MomD9_24 MomD9_25 MomD9_26 MomD9_32 MomD9_33 MomD9_34
MomD9_24 43.88745                                                      
MomD9_25 38.09619 43.59513                                             
MomD9_26 46.80698 57.56355 33.70641                                    
MomD9_32 36.58039 55.03236 47.91264 51.75606                           
MomD9_33 50.56190 70.02821 55.86210 50.19423 44.16239                  
MomD9_34 34.34089 44.17176 43.81014 53.05667 32.60922 50.71161         
MomD9_36 41.02638 61.51136 48.11275 49.25015 35.02964 39.25672 38.41653
MomD9_37 38.18031 59.16824 51.61448 54.57337 31.91800 39.63026 32.04689
MomD9_38 34.85125 57.35903 44.06042 46.31179 30.38251 39.00674 34.50355
         MomD9_36 MomD9_37
MomD9_24                  
MomD9_25                  
MomD9_26                  
MomD9_32                  
MomD9_33                  
MomD9_34                  
MomD9_36                  
MomD9_37 28.05151         
MomD9_38 26.60441 28.61639
> 
> ## Euclidean sample distance heatmap
> sampleDistMatrix = as.matrix(sampleDists)
> sampleDistMatrix
         MomD9_23 MomD9_24 MomD9_25 MomD9_26 MomD9_32 MomD9_33 MomD9_34
MomD9_23  0.00000 43.88745 38.09619 46.80698 36.58039 50.56190 34.34089
MomD9_24 43.88745  0.00000 43.59513 57.56355 55.03236 70.02821 44.17176
MomD9_25 38.09619 43.59513  0.00000 33.70641 47.91264 55.86210 43.81014
MomD9_26 46.80698 57.56355 33.70641  0.00000 51.75606 50.19423 53.05667
MomD9_32 36.58039 55.03236 47.91264 51.75606  0.00000 44.16239 32.60922
MomD9_33 50.56190 70.02821 55.86210 50.19423 44.16239  0.00000 50.71161
MomD9_34 34.34089 44.17176 43.81014 53.05667 32.60922 50.71161  0.00000
MomD9_36 41.02638 61.51136 48.11275 49.25015 35.02964 39.25672 38.41653
MomD9_37 38.18031 59.16824 51.61448 54.57337 31.91800 39.63026 32.04689
MomD9_38 34.85125 57.35903 44.06042 46.31179 30.38251 39.00674 34.50355
         MomD9_36 MomD9_37 MomD9_38
MomD9_23 41.02638 38.18031 34.85125
MomD9_24 61.51136 59.16824 57.35903
MomD9_25 48.11275 51.61448 44.06042
MomD9_26 49.25015 54.57337 46.31179
MomD9_32 35.02964 31.91800 30.38251
MomD9_33 39.25672 39.63026 39.00674
MomD9_34 38.41653 32.04689 34.50355
MomD9_36  0.00000 28.05151 26.60441
MomD9_37 28.05151  0.00000 28.61639
MomD9_38 26.60441 28.61639  0.00000
> rownames(sampleDistMatrix) = sprintf("%s\n(%s)", colnames(rld), rld$condition) #paste(colnames(rld), rld$condition, sep="-")
> colnames(sampleDistMatrix) = sprintf("%s\n(%s)", colnames(rld), rld$condition) #paste(colnames(rld), rld$condition, sep="-")
> sampleDistMatrix
               MomD9_23\n(ko) MomD9_24\n(ko) MomD9_25\n(wt) MomD9_26\n(wt)
MomD9_23\n(ko)        0.00000       43.88745       38.09619       46.80698
MomD9_24\n(ko)       43.88745        0.00000       43.59513       57.56355
MomD9_25\n(wt)       38.09619       43.59513        0.00000       33.70641
MomD9_26\n(wt)       46.80698       57.56355       33.70641        0.00000
MomD9_32\n(wt)       36.58039       55.03236       47.91264       51.75606
MomD9_33\n(ko)       50.56190       70.02821       55.86210       50.19423
MomD9_34\n(ko)       34.34089       44.17176       43.81014       53.05667
MomD9_36\n(wt)       41.02638       61.51136       48.11275       49.25015
MomD9_37\n(ko)       38.18031       59.16824       51.61448       54.57337
MomD9_38\n(wt)       34.85125       57.35903       44.06042       46.31179
               MomD9_32\n(wt) MomD9_33\n(ko) MomD9_34\n(ko) MomD9_36\n(wt)
MomD9_23\n(ko)       36.58039       50.56190       34.34089       41.02638
MomD9_24\n(ko)       55.03236       70.02821       44.17176       61.51136
MomD9_25\n(wt)       47.91264       55.86210       43.81014       48.11275
MomD9_26\n(wt)       51.75606       50.19423       53.05667       49.25015
MomD9_32\n(wt)        0.00000       44.16239       32.60922       35.02964
MomD9_33\n(ko)       44.16239        0.00000       50.71161       39.25672
MomD9_34\n(ko)       32.60922       50.71161        0.00000       38.41653
MomD9_36\n(wt)       35.02964       39.25672       38.41653        0.00000
MomD9_37\n(ko)       31.91800       39.63026       32.04689       28.05151
MomD9_38\n(wt)       30.38251       39.00674       34.50355       26.60441
               MomD9_37\n(ko) MomD9_38\n(wt)
MomD9_23\n(ko)       38.18031       34.85125
MomD9_24\n(ko)       59.16824       57.35903
MomD9_25\n(wt)       51.61448       44.06042
MomD9_26\n(wt)       54.57337       46.31179
MomD9_32\n(wt)       31.91800       30.38251
MomD9_33\n(ko)       39.63026       39.00674
MomD9_34\n(ko)       32.04689       34.50355
MomD9_36\n(wt)       28.05151       26.60441
MomD9_37\n(ko)        0.00000       28.61639
MomD9_38\n(wt)       28.61639        0.00000
> 
> colours = colorRampPalette(rev(brewer.pal(9, "GnBu")))(255)
> pdf("Fig5.Heatmap.pdf", width=6, height=6)
> par(cex.main=1)
> heatmap.2(sampleDistMatrix,trace="none",col=colours,
+           main="Heatmap\n(Euclidean distances)",
+           keysize=1.2,
+           notecex=1.1,
+           cexRow=1.0, cexCol=1.0, margins=c(10,10),
+           cellnote=round(sampleDistMatrix,1),
+           notecol="black")
> dev.off()
pdf 
  2 
> 
> ## PCA
> data <- plotPCA(rld, intgroup=c("name", "condition"), returnData=TRUE)
> percentVar = round(100 * attr(data, "percentVar"))
> ggplot(data, aes(PC1, PC2, color=condition, shape=name)) +
+   geom_hline(aes(yintercept=0), colour="grey") +
+   geom_vline(aes(xintercept=0), colour="grey") +
+   geom_point(size=5) +
+   xlab(paste0("PC1: ", percentVar[1], "% variance")) +
+   ylab(paste0("PC2: ", percentVar[2], "% variance")) +
+   theme_bw(base_size = 14) +
+   ggtitle("PCA\n") +
+   scale_shape_manual(values=c(0:18,33:17))
> ggsave(file=sprintf("Fig6.PCA.pdf"), width=7, height=6)
> 
> ##pdf("PCA.pdf")
> ##plotPCA(rld, intgroup=c("name", "condition"))
> ##dev.off()
> 
> # topN genes by pvalue
> if (length(de_total[,1]) > 0) {
+   d = data.frame(id=rownames(de_total), padj=de_total$padj)
+   if ( length(rownames(d)) < topN ) topN = length(rownames(d))
+   
+   d_topx_padj = d[order(d$padj, decreasing=F),][1:topN,]
+   d_topx_padj
+   plotdata = assay(rld)[as.character(d_topx_padj$id),]  # <- error
+   plotdata
+   
+   ## test
+   setdiff( as.character(d_topx_padj$id), rownames(plotdata))
+   
+   # rownames(plotdata) = sprintf("%s\n(%s)", colnames(rld), rld$condition) #paste(colnames(rld), rld$condition, sep="-")
+   # colnames(plotdata) = sprintf("%s\n(%s)", colnames(rld), rld$condition) #paste(colnames(rld), rld$condition, sep="-")
+   
+   if ( exists("gene_names_dic") ) rownames(plotdata) = id_to_gene_name(rownames(plotdata))  # exchange ids by gene names
+   plotdata
+   
+   pdf(sprintf("Fig7.gene_clustering_top%i_DE_genes.pdf",topN), pointsize = 9)
+   heatmap.2(plotdata, scale="row", trace="none", dendrogram="column",
+             col=colorRampPalette(rev(brewer.pal(9,"RdBu")))(255),
+             main=sprintf("Top %d DE genes\n(by adj. p-value)", topN), keysize=1,
+             margins = c(10,10),
+             cexRow=0.7, cexCol=0.9)
+   dev.off()
+ }
pdf 
  2 
> 
> ################################################################################
> 
> ## cleanup
> if ( file.exists("Rplots.pdf") ) { file.remove("Rplots.pdf") }
[1] TRUE
> 
> # report on versions used
> sink("DESeq2.session_info.txt")
> sessionInfo()
> sink()
> 
> 
