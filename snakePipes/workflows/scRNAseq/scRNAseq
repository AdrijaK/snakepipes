#!/usr/bin/env python3

__version__ = "0.6"

__description__ = """
single cell RNA-seq mapping and counting workflow v{version} - MPI-IE workflow for scRNA-seq

usage example:
    scRNAseq-mapcount -i input-dir -o output-dir mm10
""".format(version=__version__)


import argparse
import os
import subprocess
import sys
import textwrap
import time
import shutil
import yaml
import inspect
from glob import glob
import snakePipes.common_functions as cf
import snakePipes.parserCommon as parserCommon


def parse_args(defaults={"verbose":None,"configfile":None,"cluster_configfile":None,"max_jobs":None,"snakemake_options":None,"tempdir":None,
                         "downsample":None, "trim":None, "trim_options":None, "cell_names":None,
                         "filter_annotation":None, "barcode_file":None, "barcode_pattern":None, "split_lib": None,
                         "bw_binsize":None, "mapq":None, "plot_format":None}):
    """
    Parse arguments from the command line.
    """
    mainArgs = parserCommon.mainArguments(defaults, workingDir=False)

    parser = argparse.ArgumentParser(
        prog=sys.argv[0],
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description=textwrap.dedent(__description__),
        parents=[mainArgs],
        add_help=False
    )

    # Workflow options
    optional = parser.add_argument_group('Optional arguments')
    optional.add_argument("--downsample",
                          dest="downsample",
                          metavar="INT",
                          help="downsample the given number of reads randomly from of each FASTQ file",
                          type=int,
                          default=defaults["downsample"])

    optional.add_argument("--trim",
                          dest="trim",
                          action="store_true",
                          default=defaults["trim"],
                          help="Activate trimming with Cutadapt. Default: no Trimming!")

    optional.add_argument("--trim_options",
                          dest="trim_options",
                          metavar="STR",
                          type=str,
                          help="Options passed to the selected trimmer, e.g. use --trim_options='-a A{30}' "
                          "for polyA trimming with cutadapt (default: '%(default)s')",
                          default=defaults["trim_options"])

    optional.add_argument("--cell_barcode_file",
                          dest="barcode_file",
                          metavar="STR",
                          help="2-column file with cell-index (1st col) and barcode (2nd col). Default/None will use "
                          "internal CelSeq2@MPI-IE file with 192 barcodes. (default: '%(default)s')",
                          type=str,
                          default= defaults["barcode_file"])

    optional.add_argument("--barcode_pattern",
                          dest="barcode_pattern",
                          metavar="STR",
                          help="Defines the cell barcode and UMI order and length at the 5' end of R1 (Cel-seq protocol). "
                          "'N' defines UMI/random positions, X defines fixed positions; (default '%(default)s')",
                          type=str,
                          default=defaults["barcode_pattern"])

    optional.add_argument("--split_lib",
                          dest="split_lib",
                          action="store_true",
                          help="Set this option if only 96 out of 192 barcodes were used per sample.",
                          default=defaults["split_lib"])

    optional.add_argument("--filter_annotation",
                          dest="filter_annotation",
                          metavar="STR",
                          type=str,
                          help="filter annotation GTF by grep for feature counting, e.g. use --filter_annotation='-v pseudogene'; "
                          "(default: '%(default)s')",
                          default=defaults["filter_annotation"])

    optional.add_argument("--cell_names",
                          dest="cell_names",
                          metavar="STR",
                          help="either tab-sep. file with cell name ranges or directory with *.csv files that contain "
                          "cell names and plate/library information for all fastq files! (default: '%(default)s')",
                          default=defaults["cell_names"])

    optional.add_argument("--bw-binsize",
                          dest="bw_binsize",
                          metavar="INT",
                          help="bin size of output files in bigWig format (default: '%(default)s')",
                          type=int,
                          default=defaults["bw_binsize"])

    optional.add_argument("--plotFormat",
                          dest="plot_format",
                          choices=['png', 'pdf', 'None'],
                          metavar="STR",
                          type=str,
                          help="Format of the output plots from deeptools. Select 'none' for no plot (default: '%(default)s')",
                          default=defaults["plot_format"])

    return parser


def main():
    # Script-neutral paths
    baseDir = os.path.dirname(cf.__file__)
    workflowDir = os.path.join(baseDir, "workflows", os.path.basename(__file__))

    ## defaults
    defaults = cf.load_configfile(os.path.join(workflowDir, "defaults.yaml"),False)
    globalDefaults = cf.load_configfile(os.path.join(baseDir, "shared/defaults.yaml"), False)
    defaults = cf.merge_dicts(defaults, globalDefaults)

    ## get command line arguments
    parser = parse_args(defaults)
    args = parser.parse_args()

    ## we also add these paths to config, although we dont use them in the Snakefile
    args.baseDir = baseDir

    args.outdir = os.path.abspath(args.outdir)
    args.cluster_logs_dir = os.path.join(args.outdir, "cluster_logs")

    ## checks for parameters necessary in wrapper
    # 1. Dir path
    if os.path.exists(args.indir):
        args.indir = os.path.abspath(args.indir)
    else:
        sys.exit("\nError! Input dir (-i) not found! ({})\n".format(args.indir))
    # 2. Config file
    if args.configfile and not os.path.exists(args.configfile):
        sys.exit("\nError! Provided configfile (-c) not found! ({})\n".format(args.configfile))

    # 3. get abspath from user provided genome/organism file
    if not os.path.isfile(os.path.join(baseDir, "shared/organisms/{}.yaml".format(args.genome))) and os.path.isfile(args.genome):
        args.genome = os.path.abspath(args.genome)

    # 4. barcode file
    if args.barcode_file == None:
        args.barcode_file = os.path.join(workflowDir, "celseq_barcodes.192.txt")
    elif args.barcode_file != None and os.path.exists(os.path.abspath(args.barcode_file)):
        args.barcode_file = os.path.abspath(args.barcode_file)
    else:
        sys.exit("\nBarcode file (--cell_barcode_file) not found! {}\n".format(args.barcode_file))
    # 5. cell name tables
    if args.cell_names:
        if os.path.exists(os.path.abspath(args.cell_names)):
            args.cell_names = os.path.abspath(args.cell_names)
        else:
            sys.exit("\nCell_names file not found! {}\n".format(args.cell_names))

    ## merge configuration dicts
    config = defaults   # 1) form defaults.yaml
    if args.configfile:
        user_config = cf.load_configfile(args.configfile, False)
        config = cf.merge_dicts(config, user_config) # 2) form user_config.yaml
    config_wrap = cf.config_diff(vars(args), defaults) # 3) from wrapper parameters
    config = cf.merge_dicts(config, config_wrap)

    ## Output directory + log directory
    subprocess.call("[ -d {cluster_logs_dir} ] || mkdir -p {cluster_logs_dir}".format(cluster_logs_dir=args.cluster_logs_dir), shell=True)

    ## save to configs.yaml in outdir
    cf.write_configfile(os.path.join(args.outdir, 'config.yaml'),config)

    ## merge cluster config files: 1) global one, 2) workflow specific one, 3) user provided one
    cluster_config = cf.load_configfile(os.path.join(baseDir, "shared/cluster.yaml"), False)
    cluster_config = cf.merge_dicts(cluster_config, cf.load_configfile(os.path.join(workflowDir, "cluster.yaml"), False), )

    if args.cluster_configfile:
        user_cluster_config = cf.load_configfile(args.cluster_configfile, False)
        cluster_config = cf.merge_dicts(cluster_config, user_cluster_config) # 2) merge/override variables from user_config.yaml
    cf.write_configfile(os.path.join(args.outdir, 'cluster_config.yaml'), cluster_config)

    snakemake_cmd = """
                    snakemake {snakemake_options} --latency-wait {latency_wait} --snakefile {snakefile} --jobs {max_jobs} --directory {outdir} --configfile {configfile}
                    """.format( latency_wait = cluster_config["snakemake_latency_wait"],
                                snakefile = os.path.join(workflowDir, "Snakefile"),
                                max_jobs = args.max_jobs,
                                outdir = args.outdir,
                                snakemake_options = str(args.snakemake_options or ''),
                                configfile = os.path.join(args.outdir, 'config.yaml'),
                              ).split()

    # Produce the DAG if desired
    if args.createDAG:
        oldVerbose = config['verbose']
        config['verbose'] = False
        cf.write_configfile(os.path.join(args.outdir, 'config.yaml'), config)
        DAGproc = subprocess.Popen(snakemake_cmd + ['--rulegraph'], stdout=subprocess.PIPE)
        _ = open("{}/pipeline.pdf".format(args.outdir), "wb")
        foo = subprocess.check_call(["dot", "-Tpdf"], stdin=DAGproc.stdout, stdout=_)
        _.close()
        config['verbose'] = oldVerbose
        cf.write_configfile(os.path.join(args.outdir, 'config.yaml'), config)

    if args.verbose:
        snakemake_cmd.append("--printshellcmds")

    if not args.local:
        snakemake_cmd += ["--cluster-config",
                         os.path.join(args.outdir,'cluster_config.yaml'),
                         "--cluster", "'"+cluster_config["snakemake_cluster_cmd"],
                         args.cluster_logs_dir, "--name {rule}.snakemake'"]

    ## Write snakemake_cmd to log file
    fnames = glob(os.path.join(args.outdir, 'RNA-seq_run-[0-9*].log'))
    if len(fnames) == 0:
        n = 1 # no matching files, this is the first run
    else:
        fnames.sort(key=os.path.getctime)
        n = int(fnames[-1].split("-")[-1].split(".")[0]) + 1 # get new run number
    # append the new run number to the file name
    logfile_name = "RNA-seq_run-{}.log".format(n) 

    snakemake_log = "2>&1 | tee -a {}/{}".format(args.outdir, logfile_name).split()

    ## create local temp dir and add this path to environment as $TMPDIR variable
    ## on SLURM: $TMPDIR is set, created and removed by SlurmEasy on cluster node
    temp_path = cf.make_temp_dir(args.tempdir, args.outdir)
    snakemake_exports = ("export TMPDIR="+temp_path+" && ").split()

    cmd = " ".join(snakemake_exports + snakemake_cmd + snakemake_log)

    if args.verbose:
        print("\n", cmd, "\n")

    # write log file
    with open(os.path.join(args.outdir, logfile_name), "w") as f:
        f.write(" ".join(sys.argv)+"\n\n")
        f.write(cmd+"\n\n")

    ## Run snakemake
    p = subprocess.Popen(cmd, shell=True)
    if args.verbose:
        print("PID:", p.pid, "\n")
    try:
        p.wait()
    except:
        print("\nWARNING: Snakemake terminated!!!")
        if p.returncode != 0:
            if p.returncode:
                print("Returncode:", p.returncode)

            # kill snakemake and child processes
            subprocess.call(["pkill", "-SIGTERM", "-P", str(p.pid)])
            print("SIGTERM sent to PID:", p.pid)

    ## remove temp dir
    if (temp_path != "" and os.path.exists(temp_path)):
        shutil.rmtree(temp_path, ignore_errors=True)
        if args.verbose:
            print("Temp directory removed ("+temp_path+")!\n")


if __name__ == "__main__":
    main()
