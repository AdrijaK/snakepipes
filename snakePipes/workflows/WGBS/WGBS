#!/usr/bin/env python3

__description__ = """
MPI-IE workflow for WGBS analysis

usage example:
    WGBS -i read_input_dir -o output-dir mm10
"""

import argparse
import os
import sys
import textwrap
import snakePipes.common_functions as cf
import snakePipes.parserCommon as parserCommon


def minOne(x):
    """
    Ensure x is an integer >=1
    """
    x = int(x)
    if x < 1:
        raise argparse.ArgumentTypeError("Minimum value of 1 for --maxDist and --minCpGs")
    return x


def bounded01(x):
    """
    Ensure values are bounded [0, 1)
    """
    x = float(x)
    if x < 0 or x >= 1:
        raise argparse.ArgumentTypeError("The values for --minMethDiff, --minAbsDiff, and --FDR must be between 0 and 1")
    return x


def parse_args(defaults={"verbose": False, "configfile": None, "cluster_configfile":None, "max_jobs": 12, "snakemake_options": "--use-conda", "tempdir": None,
                         "downsample": None, "trim": True, "trim_prg": "fastp", "trim_options": "-q 5 -l 30 -M 5", "maxDist": 300, "minCpGs": 10, "minMethDiff": 0, "minAbsDiff": 0.1, "FDR": 0.1,
                         "MethylDackelOptions": "--mergeContext --maxVariantFrac 0.25 --minDepth 4", "fastqc": False, 'bw_binsize': 25, 'plot_format': 'png', "bam_ext": '.PCRrm.bam',
                         "intList": [], "blackList": None, "sampleSheet": None, "mbias_ignore": "auto", "fromBam": False, "skipDOC": False, "skipGCbias": False}):
    """
    Parse arguments from the command line.
    """
    mainArgs = parserCommon.mainArguments(defaults)

    parser = argparse.ArgumentParser(
        prog=sys.argv[0],
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description=textwrap.dedent(__description__),
        parents=[mainArgs],
        add_help=False
    )

    # Workflow options
    optional = parser.add_argument_group('Options')

    parserCommon.commonOptions(optional, defaults)


    optional.add_argument("--intList",
                          dest="intList",
                          action='append',
                          help="BED file(s) with target intervals to confine the analysis on. Use multiple times to pass multiple bed files. (default: '%(default)s')",
                          default=defaults["intList"])

    optional.add_argument("--blackList",
                          dest="blackList",
                          action='store',
                          help="Bed file(s) with positions to mask for methylation calling. Useful for masking SNPs in your strain of interest. (default: '%(default)s')",
                          default=defaults["blackList"])

    optional.add_argument("--sampleSheet",
                          dest="sampleSheet",
                          action='store',
                          help="Perform differential methylation analysis between groups of samples by providing a text file with sample information to use for statistical analysis. (default: '%(default)s')",
                          default=defaults["sampleSheet"])

    optional.add_argument("--mbias",
                          dest="mbias_ignore",
                          action='store',
                          help="Number of nucleotides with methylation bias to ignore during methylation extraction. In the *auto* mode this number is automaticaly calculated by MethylDackel (default: '%(default)s')",
                          default=defaults["mbias_ignore"])

    optional.add_argument("--maxDist",
                          type=minOne,
                          help="The maximum distance between CpGs in a DMR (for metilene, default: '%(default)s')",
                          default=defaults["maxDist"])

    optional.add_argument("--minCpGs",
                          type=minOne,
                          help="The minimum number of CpGs in a DMR (for metilene, default: '%(default)s')",
                          default=defaults["minCpGs"])

    optional.add_argument("--minMethDiff",
                          type=float,
                          help="The minimum methylation change in methylation for CpG inclusion in DMR detection (for metilene, default: '%(default)s')",
                          default=defaults["minMethDiff"])

    optional.add_argument("--minAbsDiff",
                          type=float,
                          help="The minimum methylation for returned DMRs (default: '%(default)s')",
                          default=defaults["minAbsDiff"])

    optional.add_argument("--FDR",
                          type=float,
                          help="FDR threshold for returned DMRs (default: '%(default)s')",
                          default=defaults["FDR"])

    optional.add_argument("--MethylDackelOptions",
                          help="Options to pass to MethylDackel extract (default: '%(default)s')",
                          default=defaults["MethylDackelOptions"])

    optional.add_argument("--fromBam",
                         dest="fromBam",
                         action="store_true",
                         help=argparse.SUPPRESS,default=defaults["fromBam"])

    optional.add_argument("--skipDOC",
                         dest="skipDOC",
                         action="store_true",
                         help="Skip depth of coverage calculation with GATK.",default=defaults["skipDOC"])

    optional.add_argument("--skipGCbias",
                         dest="skipGCbias",
                         action="store_true",
                         help="Skip GC bias calculation with deepTools.",default=defaults["skipGCbias"])

    return parser


def main():
    baseDir, workflowDir, defaults = cf.setDefaults(os.path.basename(__file__))

    # get command line arguments
    parser = parse_args(defaults)
    args = parser.parse_args()
    args, defaults = cf.handleUserArgs(args, defaults, parse_args)

    # we also add these paths to config, although we don't use them in the Snakefile
    args.baseDir = baseDir

    # Common arguments
    cf.checkCommonArguments(args, baseDir, outDir=True)

    # Handle YAML and log files
    snakemake_cmd = cf.commonYAMLandLogs(baseDir, workflowDir, defaults, args, __file__)
    logfile_name = cf.logAndExport(args, os.path.basename(__file__))

    # Run everything
    cf.runAndCleanup(args, snakemake_cmd, logfile_name)


if __name__ == "__main__":
    main()
