import os
import re
from operator import is_not
import glob
import io
import gzip
import snakePipes.common_functions as cf

### snakemake_workflows initialization ########################################
maindir = os.path.dirname(os.path.dirname(workflow.basedir))
workflow_tools=os.path.join(maindir, "shared", "tools")
workflow_rscripts=os.path.join(maindir, "shared", "rscripts")

# load conda ENVs (path is relative to "shared/rules" directory)
globals().update(cf.set_env_yamls())

# load config file
globals().update(cf.load_configfile(workflow.overwrite_configfile,config["verbose"]))
# load organism-specific data, i.e. genome indices, annotation, etc.
globals().update(cf.load_organism_data(genome, maindir, config["verbose"]))

# do workflow specific stuff now
include: os.path.join(workflow.basedir, "internals.snakefile")

### include modules of other snakefiles ########################################
################################################################################

metileneGroups = ""  # Just for rendering of the WGBS snakefile
if sampleSheet:
    cf.check_sample_info_header(sampleSheet)
    metileneGroups = getGroups(sampleSheet)

# FastQC
if fastqc:
    include: os.path.join(maindir, "shared", "rules", "FastQC.snakefile")

# trimming
if trim:
    include: os.path.join(maindir, "shared", "rules", "TrimGalore.snakefile")

### conditional/optional rules #################################################
#some of those definitions are used to generate output strings for some of the rules
################################################################################

# TODO: Still needed?
idxRange = 2 if paired else 1
def calc_doc(skipDOC):
    if not skipDOC:
        return (["QC_metrics/genomeCoverage.sample_summary",
                 "QC_metrics/genomeCoverage.png",
                 expand("QC_metrics/{sample}.doc.sample_summary", sample=samples)])
    else:
        return ([])

def run_FastQC(fastqc):
    if fastqc:
        return( expand("FastQC/{sample}{read}_fastqc.html", sample = samples, read = reads[:idxRange]) )
    else:
        return([])

# Is this actually used?
def run_Trimming(trim, fastqc):
    if trim and fastqc:
        return(expand(fastq_dir + "/{sample}{read}.fastq.gz", sample=samples, read=reads[:idxRange]) +
               expand("FastQC_trimmed/{sample}{read}_fastqc.html", sample=samples, read=reads[:idxRange]))
    elif trim:
        return(expand(fastq_dir + "/{sample}{read}.fastq.gz", sample=samples, read=reads[:idxRange]) )
    else:
        return([])

def get_outdir(folder_name):
    if sampleSheet:
        sample_name = os.path.basename(sampleSheet)
        if "." in sample_name:
            idx = sample_name.rindex(".")
            sample_name = sample_name[:idx]
    else:
        sample_name = ""
    return("{}_{}".format(folder_name, sample_name))


def run_CpG_stats(sampleSheet):
    if sampleSheet:
        return (['{}/singleCpG.RData'.format(get_outdir("limma")),
                 '{}/limdat.LG.RData'.format(get_outdir("limma")),
                 '{}/metilene.IN.txt'.format(get_outdir("metilene")),
                 '{}/Stats_report.html'.format(get_outdir("limma"))])
    else:
        return ([])


def run_metilene_all(sampleSheet):
    if sampleSheet:
        return (['{}/Stats_report.html'.format(get_outdir("metilene"))])
    else:
        return ([])


def run_int_aggStats(intList,sampleSheet):
    if intList and not sampleSheet:
        int_dest=[re.sub('.bed', '.CpGlist.bed', os.path.basename(x)) for x in intList]
        return ([os.path.join("aux_files", re.sub('.fa', w, os.path.basename(genome_fasta))) for w in int_dest])
    if intList and sampleSheet:
            int_dest2=[re.sub('.bed', '.aggCpG.RData', os.path.basename(x)) for x in intList]
            return ([os.path.join("{}".format(get_outdir("aggregate_stats_limma")), w) for w in int_dest2])
    else:
        return ([])


def run_deeptools(skipGCbias):
    if not skipGCbias:
        return (expand("QC_metrics/{sample}.freq.txt", sample = samples, read = reads) + expand("QC_metrics/{sample}.GCbias.png", sample = samples, read = reads))
    else:
        return ([])


def run_aggStats_report(intList,sampleSheet):
    if intList and sampleSheet:
        return(['{}/Stats_report.html'.format(get_outdir("aggregate_stats_limma"))])
    else:
        return([])


### include modules of other snakefiles ########################################
##some rules depend on the definitions above
################################################################################
if not fromBam:
    # FASTQ: either downsample FASTQ files or create symlinks to input files
    include: os.path.join(maindir, "shared", "rules", "FASTQ.snakefile")

# WGBS
include: os.path.join(maindir, "shared", "rules", "WGBS.snakefile")

### execute before workflow starts #############################################
################################################################################
onstart:
    with open (os.path.join(outdir, 'pipeline.log'),"a") as lo:
        if "verbose" in config and config["verbose"]:
            print("--- Workflow parameters --------------------------------------------------------",file=lo)
            print("samples:"+ str(samples),file=lo)
            print("input dir:"+ indir,file=lo)
            print("-" * 80,file=lo)#, "\n"

            print("--- Environment ----------------------------------------------------------------",file=lo)
            print("$TMPDIR: "+os.getenv('TMPDIR', ""),file=lo)
            print("$HOSTNAME: "+os.getenv('HOSTNAME', ""),file=lo)
            print("-" * 80,file=lo)#, "\n"

### main rule ##################################################################
################################################################################
if not fromBam:
    localrules:
        FASTQ1,
        FASTQ2

    rule all:
        input:
            run_FastQC(fastqc),
            expand("bwameth/{sample}.PCRrm.bam", sample = samples),
            expand("QC_metrics/{sample}.Mbias.txt", sample=samples),
            calc_doc(skipDOC),
            'QC_metrics/QC_report.html',
            run_deeptools(skipGCbias),
            expand("MethylDackel/{sample}_CpG.bedGraph", sample=samples),
            expand("MethylDackel/{sample}_CpG.methylation.bw", sample=samples),
            expand("MethylDackel/{sample}_CpG.coverage.bw", sample=samples),
#            run_CpG_stats(sampleSheet),
            run_metilene_all(sampleSheet),
#            run_int_aggStats(intList, False),
#            run_int_aggStats(intList, sampleSheet),
#            run_aggStats_report(intList, sampleSheet)
else:
    localrules:
        link_bam

    rule all:
        input:
            expand("bwameth/{sample}.PCRrm.bam", sample = samples),
            expand("QC_metrics/{sample}.Mbias.txt", sample=samples),
            calc_doc(skipDOC),
            'QC_metrics/QC_report.html',
            run_deeptools(skipGCbias),
            expand("MethylDackel/{sample}_CpG.bedGraph", sample=samples),
            expand("MethylDackel/{sample}_CpG.methylation.bw", sample=samples),
            expand("MethylDackel/{sample}_CpG.coverage.bw", sample=samples),
#            run_CpG_stats(sampleSheet),
            run_metilene_all(sampleSheet),
#            run_int_aggStats(intList, False),
#            run_int_aggStats(intList, sampleSheet),
#            run_aggStats_report(intList, sampleSheet)


### execute after workflow finished ############################################
################################################################################
onsuccess:
    cf.cleanLogs(outdir)
    if "verbose" in config and config["verbose"]:
        with open (os.path.join(outdir, 'pipeline.log'),"a") as lo:
            print("--- WGBS workflow finished successfully! --------------------------------",file=lo)#\n \n
